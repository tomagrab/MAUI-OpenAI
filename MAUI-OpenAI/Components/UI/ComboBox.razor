@inject IJSRuntime JS
@inject IComboBoxService ComboBoxService
@inject IInputStateService InputStateService

<div class="relative" @ref="comboBoxRef">
    <input
        type="text"
        @bind="SearchText"
        @bind:event="oninput"
        @onfocus="HandleFocus"
        @onkeydown="HandleKeyDown"
        @onclick="ShowDropdown"
        disabled="@InputDisabled"
        class="p-2 rounded border border-gray focus:outline-none bg-input text-brightWhite w-full disabled:cursor-not-allowed disabled:opacity-50 pr-10"
        placeholder="@Placeholder"
        aria-autocomplete="list"
        aria-controls="comboBoxDropdown"
    />
    @if (!string.IsNullOrEmpty(SearchText))
    {
        <button
            type="button"
            class="absolute right-2 top-2 text-brightWhite hover:text-gray-900 focus:outline-none"
            @onclick="ClearInput"
            aria-label="Clear input"
            disabled="@InputDisabled"
        >
            <i class="fas fa-times"></i>
        </button>
    }
    @if (DropdownVisible)
    {
        @if (FilteredItems.Any())
        {
            <ul id="comboBoxDropdown" class="absolute z-10 mt-1 bg-darkblue border border-gray rounded w-full max-h-80 overflow-y-auto">
                @foreach (var item in FilteredItems)
                {
                    <li
                        @onclick="() => SelectItem(item)"
                        tabindex="0"
                        class="p-2 cursor-pointer hover:bg-gray-700 text-brightWhite"
                    >
                        @((MarkupString)HighlightText(item))
                    </li>
                }
            </ul>
        }
        else
        {
            <div class="absolute z-10 mt-1 bg-darkblue border border-gray rounded w-full p-2 text-brightWhite">
                No results found
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public List<string> Items { get; set; } = new List<string>();

    [Parameter]
    public EventCallback<string> OnItemSelected { get; set; }
    [Parameter]
    public bool InputDisabled { get; set; } = false;
    [Parameter]
    public string Placeholder { get; set; } = "Select item";
    [Parameter]
    public EventCallback<string> OnError { get; set; }
    [Parameter]
    public EventCallback OnClear { get; set; }
    [Parameter]
    public string Value { get; set; } = string.Empty;

    private string SearchText { get; set; } = string.Empty;
    private bool DropdownVisible { get; set; } = false;
    private ElementReference comboBoxRef;

    private List<string> FilteredItems => ComboBoxService.FilterItems(SearchText, Items);

    protected override void OnInitialized()
    {
        SearchText = Value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("registerOutsideClick", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnOutsideClick(double clientX, double clientY)
    {
        var rect = new BoundingClientRectModel();
        if (await ComboBoxService.IsClickOutsideAsync(clientX, clientY, rect, JS, comboBoxRef, OnError))
        {
            HideDropdown();
        }
    }

    private void ShowDropdown()
    {
        DropdownVisible = true;
    }

    private void HideDropdown()
    {
        DropdownVisible = false;
        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && FilteredItems.Any())
        {
            await SelectItem(FilteredItems.First());
        }
    }

    private async Task SelectItem(string item)
    {
        SearchText = item;
        DropdownVisible = false;
        await OnItemSelected.InvokeAsync(item);
    }

    private async void ClearInput()
    {
        SearchText = string.Empty;
        DropdownVisible = false;
        await OnClear.InvokeAsync();
    }

    private void HandleFocus()
    {
        if (SearchText == Placeholder)
        {
            SearchText = string.Empty;
        }
        ShowDropdown();
    }

    public async Task ClearAsync()
    {
        SearchText = string.Empty;
        DropdownVisible = false;
        await OnClear.InvokeAsync();
    }

    private string HighlightText(string text)
    {
        if (string.IsNullOrEmpty(SearchText)) return text;

        var highlightedText = text.Replace(SearchText, $"<mark>{SearchText}</mark>", StringComparison.OrdinalIgnoreCase);
        return highlightedText;
    }
}