@using MAUI_OpenAI.Models
@using OpenAI.Audio
@inject IRoleSelectorService RoleSelectorService
@inject ISpeechService SpeechService

<div class="mb-4 flex gap-4 items-center justify-between">
    <div class="flex gap-4">
        <ComboBox
            Items="GetSortedRoles()"
            OnItemSelected="HandleRoleChange"
            @ref="comboBoxRef"
            InputDisabled="@inputDisabled"
            Placeholder="Select Role"
            Value="@selectedRole?.RoleName"
            OnClear="HandleClear"
        />
        @if (!string.IsNullOrEmpty(selectedRole?.RoleName))
        {
            <GetAppearance
                Role="@selectedRole.RoleName"
                Description="@selectedRole.Description"
                OnImageGenerated="HandleImageGenerated"
                OnError="HandleError"
                OnLoading="HandleLoading"
                IsAppearanceGenerating="@isAppearanceGenerating"
                IsSendingMessage="IsSendingMessage"
                IsImageLoading="IsImageLoading"
            />
        }
    </div>
    <div class="flex gap-2 items-center">
        @if (SpeechService.IsSpeechEnabled)
        {
            <ComboBox
                Items="GetVoices()"
                OnItemSelected="HandleVoiceChange"
                Placeholder="Select Voice"
                Value="Alloy"
                InputDisabled="@inputDisabled"
                OnClear="HandleVoiceClear"
                @ref="voiceComboBoxRef"
            />
        }
        <button
            @onclick="ToggleSpeech"
            type="button"
            class="text-brightWhite p-2 rounded-full hover:text-brightYellow focus:outline-none"
        >
            <i class="fa @(SpeechService.IsSpeechEnabled ? "fa-microphone" : "fa-microphone-slash")"></i>
        </button>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<string> OnRoleSelected { get; set; }
    [Parameter]
    public EventCallback<byte[]> OnImageGenerated { get; set; }
    [Parameter]
    public EventCallback<string> OnError { get; set; }
    [Parameter]
    public EventCallback<bool> OnLoading { get; set; }
    [Parameter]
    public bool IsSendingMessage { get; set; } = false;
    [Parameter]
    public bool IsImageLoading { get; set; } = false;
    [Parameter]
    public bool IsAppearanceLoading { get; set; } = false;
    [Parameter]
    public List<ChatMessageModel> ChatMessageList { get; set; } = new List<ChatMessageModel>();

    private bool inputDisabled => isAppearanceGenerating || IsSendingMessage || IsImageLoading;
    private List<RolePromptModel> roles = new List<RolePromptModel>();
    private RolePromptModel? selectedRole;
    private string selectedVoice = "Alloy";
    private bool isAppearanceGenerating = false;
    private ComboBox? comboBoxRef;
    private ComboBox? voiceComboBoxRef;

    protected override async Task OnInitializedAsync()
    {
        roles = RolePromptModel.RolePrompts();
        selectedRole = RolePromptModel.GetCurrentRole(roles);
        await HandleRoleChange(selectedRole.RoleName);
        await HandleVoiceChange(selectedVoice);
    }

    private List<string> GetSortedRoles()
    {
        return roles.Select(role => role.RoleName).OrderBy(role => role).ToList();
    }

    private List<string> GetVoices()
    {
        return Enum.GetNames(typeof(GeneratedSpeechVoice)).ToList();
    }

    private async Task HandleRoleChange(string value)
    {
        RolePromptModel.ChangeCurrentRole(roles, value);
        selectedRole = RolePromptModel.GetCurrentRole(roles);
        await RoleSelectorService.HandleRoleChangeAsync(selectedRole.RoleName, OnRoleSelected);
        StateHasChanged();
    }

    private async Task HandleVoiceChange(string value)
    {
        if (Enum.TryParse(value, out GeneratedSpeechVoice voice))
        {
            SpeechService.SelectedVoice = voice;
        }
        selectedVoice = value;
        StateHasChanged();
    }

    private async Task HandleClear()
    {
        RolePromptModel.ChangeCurrentRole(roles, "Helpful Assistant");
        selectedRole = RolePromptModel.GetCurrentRole(roles);
        StateHasChanged();
    }

    private async Task HandleVoiceClear()
    {
        selectedVoice = "Alloy";
        StateHasChanged();
    }

    private async Task HandleImageGenerated(byte[] imageBytes)
    {
        isAppearanceGenerating = false;
        await RoleSelectorService.HandleImageGeneratedAsync(imageBytes, OnImageGenerated);
        var chatMessage = new ChatMessageModel(Convert.ToBase64String(imageBytes), "assistant", isImage: true);
        ChatMessageList.Add(chatMessage);
        StateHasChanged();
    }

    private async Task HandleError(string error)
    {
        isAppearanceGenerating = false;
        await RoleSelectorService.HandleErrorAsync(error, OnError);
    }

    private async Task HandleLoading(bool loading)
    {
        isAppearanceGenerating = loading;
        await RoleSelectorService.HandleLoadingAsync(loading, OnLoading);
    }

    public async Task ClearRoleAsync()
    {
        RolePromptModel.ChangeCurrentRole(roles, "Helpful Assistant");
        selectedRole = RolePromptModel.GetCurrentRole(roles);
        if (comboBoxRef != null)
        {
            await comboBoxRef.SetValueAsync("Helpful Assistant");
        }
        StateHasChanged();
    }

    public async Task SetDefaultVoiceAsync(string voice)
    {
        if (voiceComboBoxRef != null)
        {
            await voiceComboBoxRef.SetValueAsync(voice);
        }
        selectedVoice = voice;
        StateHasChanged();
    }

    private void ToggleSpeech()
    {
        SpeechService.ToggleSpeech();
        StateHasChanged();
    }
}