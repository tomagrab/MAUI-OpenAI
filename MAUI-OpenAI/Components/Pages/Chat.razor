@page "/"
@inject IOpenAIService OpenAIService
@inject IMarkdownService MarkdownService
@inject IChatService ChatService
@inject IConversationService ConversationService
@inject IJSRuntime JS
@inject ISpeechService SpeechService

<div class="flex flex-col h-full bg-backdrop text-brightWhite relative">
    <RoleSelector
        @ref="roleSelectorRef"
        IsSendingMessage="@isSendingMessage"
        IsImageLoading="@isImageLoading"
        IsAppearanceLoading="@isAppearanceLoading"
        OnRoleSelected="HandleRoleSelected"
        OnImageGenerated="HandleImageGenerated"
        OnError="HandleError"
        OnLoading="HandleLoading"
        ChatMessageList="@chatMessages"
    />
    <ChatMessages
        ErrorMessage="@errorMessage"
        IsImageLoading="@isImageLoading"
        IsAppearanceLoading="@isAppearanceLoading"
        OnImageClick="OpenModal"
        OnError="HandleError"
    />
    <ChatInput
        UserMessage="@userMessage"
        IsSendingMessage="@isSendingMessage"
        IsImageGenerationMode="@isImageGenerationMode"
        IsAppearanceLoading="@isAppearanceLoading"
        IsImageLoading="@isImageLoading"
        TokenCount="@tokenCount"
        MaxTokens="@MaxTokens"
        CharactersPerToken="@CharactersPerToken"
        OnSendMessage="HandleSendMessage"
        OnToggleImageGeneration="HandleToggleImageGeneration"
        OnClearMessages="HandleClearMessages"
        OnError="HandleError"
    />
    @if (showModal)
    {
        <Modal
            ImageSrc="@selectedImage"
            OnClose="HandleModalClose"
            OnError="HandleError"
        />
    }
</div>

@code {
    private string userMessage = "";
    private bool isSendingMessage = false;
    private bool isImageLoading = false;
    private bool isAppearanceLoading = false;
    private bool isImageGenerationMode = false;
    private List<ChatMessageModel> chatMessages => _currentConversation.Messages;
    private bool showModal = false;
    private string selectedImage = "";
    private string errorMessage = "";
    private string currentRole = "";
    private RoleSelector? roleSelectorRef;
    private ConversationModel _currentConversation;

    private const int MaxTokens = 1000;
    private const double CharactersPerToken = 3.5;
    private int tokenCount = 0;

    private EventCallback<string> OnError => EventCallback.Factory.Create<string>(this, HandleError);
    private EventCallback<byte[]> OnImageGenerated => EventCallback.Factory.Create<byte[]>(this, HandleImageGenerated);

    private bool speechInvoked = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _currentConversation = ConversationService.GetAllConversations().FirstOrDefault();
        if (_currentConversation == null)
        {
            _currentConversation = ConversationService.AddConversation("Default");
        }
        else
        {
            ClearAllMessages();
        }
        SpeechService.OnStopAudioRequested += HandleStopAudioRequested;
    }

    private async Task HandleSendMessage(string message)
    {
        isSendingMessage = true;
        speechInvoked = false;
        await ChatService.HandleSendMessageAsync(message, isImageGenerationMode, MarkdownService, OnError, () => InvokeAsync(StateHasChanged), OnImageGenerated, HandleResponseComplete);
        isSendingMessage = false;
    }

    private async Task HandleResponseComplete()
    {
        if (SpeechService.IsSpeechEnabled && !speechInvoked)
        {
            var lastAssistantMessage = _currentConversation.Messages.LastOrDefault(m => m.Role == "assistant")?.Message;
            if (lastAssistantMessage != null)
            {
                speechInvoked = true;
                await OpenAIService.GenerateSpeechAsync(lastAssistantMessage, SpeechService.SelectedVoice, async (speechBytes) =>
                {
                    await JS.InvokeVoidAsync("playAudio", Convert.ToBase64String(speechBytes));
                }, OnError);
            }
        }
    }

    private void HandleRoleSelected(string newRolePrompt)
    {
        ChatService.AddForgetPreviousRoleMessage(currentRole, OnError);
        ChatService.AddRoleMessage(newRolePrompt, OnError);

        currentRole = newRolePrompt;
        StateHasChanged();
    }

    private void HandleImageGenerated(byte[] imageBytes)
    {
        isImageLoading = false;
        StateHasChanged();
    }

    private async Task HandleLoading(bool isLoading)
    {
        if (isImageGenerationMode)
        {
            isImageLoading = isLoading;
        }
        else
        {
            isAppearanceLoading = isLoading;
        }
        await InvokeAsync(StateHasChanged);
    }

    private void HandleToggleImageGeneration(bool isGenerating)
    {
        try
        {
            isImageGenerationMode = isGenerating;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            HandleError($"Error toggling image generation: {ex.Message}");
        }
    }

    private async Task HandleClearMessages()
    {
        try
        {
            ClearAllMessages();
            if (roleSelectorRef != null)
            {
                await roleSelectorRef.ClearRoleAsync();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            HandleError($"Error clearing messages: {ex.Message}");
        }
    }

    private void ClearAllMessages()
    {
        _currentConversation.ClearMessages(OnError);
        errorMessage = "";
    }

    private void HandleError(string message)
    {
        errorMessage = message;
        StateHasChanged();
    }

    private void OpenModal(string imageSrc)
    {
        try
        {
            selectedImage = imageSrc;
            showModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            HandleError($"Error opening modal: {ex.Message}");
        }
    }

    private void HandleModalClose()
    {
        try
        {
            showModal = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            HandleError($"Error closing modal: {ex.Message}");
        }
    }

    private async Task HandleStopAudioRequested()
    {
        try
        {
            await JS.InvokeVoidAsync("stopAudio");
        }
        catch (Exception ex)
        {
            HandleError($"Error stopping audio: {ex.Message}");
        }
    }

    public void Dispose()
    {
        try
        {
            SpeechService.OnStopAudioRequested -= HandleStopAudioRequested;
        }
        catch (Exception ex)
        {
            HandleError($"Error disposing: {ex.Message}");
        }
    }
}